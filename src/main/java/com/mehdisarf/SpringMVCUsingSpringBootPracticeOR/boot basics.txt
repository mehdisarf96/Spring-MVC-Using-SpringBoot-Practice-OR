How to configure Spring MVC Application using Spring Boot.

adhere = پایبند بودن به چیزی - پایبندی و پیروی کردن از چیزی/اصولی

Spring Boot adheres to the principle of Convention Over Configuration (COC).
this allows us to rapidly stand up a Spring MVC project with minimal configuration.
=============================================

ba Spring Initializr ye Spring Boot project misazam (web ro ham besh ezaf mikonam.)

hala pom.xml ro nega kon.

A very important part of this Pom is the Parent Pom.

<parent>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-parent</artifactId>
	<version>2.6.4</version>
	<relativePath/> <!-- lookup parent from repository -->
</parent>

so we are relying upon a Parent Pom provided by Spring Boot.

be in ham tavajoh kon ke dependency e spring-boot-starter-web ro ham darim tu
qesmate dependency ha.

az pom.xml birun berim va hala berim be khode dependency ha nega konim.

spring-boot-starter jar file ro baz mikonim va mibinim ke tu in jar, ye Pom.xml dg hast.

That's how Spring Boot configures a lot of these dependencies by linking
all of these Pom files.

age dependency haye tuye in pom ro bebinim, mibni ke spring-boot-starter is relying upon
the spring-boot-autoconfigure dependency va spring-boot-autoconfigure jozve dependency hast.

hala age beri jar file e spring-boot-autoconfigure ro check koni, mibni ke ye
pom.xml dg ham unja hast :))) va in pom kolllllliiiii dependency haye mokhtalef dare.

and that's how Spring Boot is smart enough to manage all of our dependencies
and it knows the particular versions of a dependency that should be used
to build our project.

(hame ina pom.xml eshun tuye pooshe maven eshun bud.)

hala berim be jar file e spring-boot-starter-web ye nega konim.
tu in jar, ye pom.xml dg :))) peyda mikonim.

va age berim dependency hayii ke dare ro nega konim, dependency haye mokhtalefi dare. masaalan

spring-boot-starter
spring-boot-starter-tomcat
jackson-databind
hibernate-validator
spring-web
spring-webmvc
...

yani kolan dependency hayii ke lazem darim vaqti darim yek Spring Boot starter web project misazim.

nokte ine ke poshte sahne, spring boot dare manage mikone tamame in dependency haro.
dare koli autoconfiguration anjam mide baramun
va be hamin khatere ke man e developer dg niaz ni dargire config ha besham.

-------------------------------------------
hala berim soraqe Java code ha.

@SpringBootApplication
public class SpringMvcUsingSpringBootPracticeOrApplication {

	public static void main(String[] args) {
		SpringApplication.run(SpringMvcUsingSpringBootPracticeOrApplication.class, args);
	}

}

1-Avalin chize qabele tavajoh:

main method dare so This is basically the Starting Point for the Spring Boot Application
and the Embedded Tomcat Server is going to be initiated by this main method.

so vaqti ba Spring boot kar mikonim, tarjih ine ke az yek Embedded Server
estefade konim.

so bejaye building a WAR va deploying it to standalone tomcat server,
we are packaging in the servlet container within the application libraries
and initiate it programatically.

2-dovomin chize qabele tavajoh:

@SpringBootApplication annotation.

in annotation dar vaqe stands as a proxy for several other annotations
that do some very important things. beri dakhelesh ro bbini mibini ke
un annotation haye mohem inan:

@SpringBootConfiguration
@EnableAutoConfiguration
@ComponentScan()
ke karhaye besiar mohemi anjam midan.

******************************
@SpringBootConfiguration: be esmesh tavajoh kon.

   Doc: Indicates that a class provides Spring Boot application @Configuration.
   Can be used as an alternative to the Spring's standard @Configuration annotation so that configuration can be found automatically (for example in tests).

This (yani @SpringBootConfiguration) is going to define the @Configuration annotation
so it's basically just allowing us to register beans within any class that is annotated with
the @SpringBootApplication annotation.

******************************
@EnableAutoConfiguration: a very loaded annotation.

it tells Spring Boot to start adding beans based upon different libraries it
finds on the classpath, other beans it may finds and ...

basically it tells Spring Boot to inspect the application. if u find some
for library or feature that u are aware of, perform as much autoconfiguration
as possible. and this is adhering to COC.

ye mesal besiar khub tu MVC app is when Spring Boot detects the Spring-webmvc dependency on
the classpath. it is going to automatically register a DispatcherServlet.

you are not going to see a DispatcherServlet registereed anywhere.
and that's because Spring Boot is taking care of it behind the scene.
******************************

@ComponentScan: inam ke midunim. Spring Boot be Spring mige ke boro
va component scan kon hamechio.

--------------------------------------------
--------------------------------------------
--------------------------------------------

so ba tamame in chizha, all we need to do (as the developer)
baraye inke yek Spring MVC project ro under the Spring Boot approach bala biarim,
ine ke yedune controller besazim :D

controller et ro besaz va bad run kon va khalas :D

